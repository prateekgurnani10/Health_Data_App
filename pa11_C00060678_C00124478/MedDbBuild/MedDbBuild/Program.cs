using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data.SqlClient;
using System.Threading;

/*
Author(s) : Gerald Frilot Prateek Gurnani
ULID(s) : C00060678 / C00124478
Assignment: assignment-11
Due Date:  4/29/2019 @ 11:55 pm
Description: Design two applications (One builds a database schema and the other processes the database)
Certification of Authenticity :
            We certify that the code and other required components in the files of this project, other than code
            provided by the instructor or in the instructions for this assignment or generated by Visual
            Studio is entirely our own work.
 */

namespace MedDbBuild
{
    class Program
    {
        static void Main(string[] args)
        {
            RemoveTable();
            ConnectToDB();
        }

        // Method RemoveTable()
        // Description: Drops the tables completely
        public static void RemoveTable()
        {
            // Create connection string
            string ConnectionString = "Server=tcp:medserver1.database.windows.net,1433;" +
                 "Initial Catalog=project11;Persist Security Info=False;User ID=projectMed;" +
                 "Password=Medical123;MultipleActiveResultSets=False;Encrypt=True;" +
                 "TrustServerCertificate=False;Connection Timeout=30;";

            // Create drop table queries
            string queryDestroy = @"DROP TABLE categories;";
            string queryBDestroy = @"DROP TABLE cities;";
            string queryCDestroy = @"DROP TABLE measures;";
            string queryDDestroy = @"DROP TABLE healthdata";

            // Create a connection (connection string)
            using (SqlConnection thisConnectionA = new SqlConnection(ConnectionString))

            {
                // Create a command (drop table query, connection)
                SqlCommand commandA = new SqlCommand(queryDDestroy, thisConnectionA);


                try
                {
                    // Open the connection (connection.Open())
                    thisConnectionA.Open();
                    // Execute the command (command.ExecuteNonQuery())
                    commandA.ExecuteNonQuery();
                    Console.WriteLine("HEALTHDATA TABLE DROPPED.");


                }
                // Catch exceptions
                catch (Exception ex)
                {
                    Console.WriteLine("Checking if category table exists.");

                }
                SqlCommand commandB = new SqlCommand(queryBDestroy, thisConnectionA);
                try
                {

                    commandB.ExecuteNonQuery();
                    Console.WriteLine("CITIES TABLE DROPPED..");


                }
                catch (Exception ex)
                {
                    Console.WriteLine("Checking if city table exists..");

                }

                SqlCommand commandC = new SqlCommand(queryCDestroy, thisConnectionA);

                try
                {

                    commandC.ExecuteNonQuery();
                    Console.WriteLine("MEASURES TABLE DROPPED...");



                }
                catch (Exception ex)
                {
                    Console.WriteLine("Checking if measures table exists...");

                }

                SqlCommand commandD = new SqlCommand(queryDestroy, thisConnectionA);

                try
                {

                    commandD.ExecuteNonQuery();
                    Console.WriteLine("CATEGORIES TABLE DROPPED....");
                    Console.WriteLine();

                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                    Console.ReadKey();
                    Console.WriteLine("Checking if categories data table exists....");

                }
                // Close the connection 

                thisConnectionA.Close();

            }



        }


        // Method: ConnectToDB()
        // Description: Connects to the database and creates the tables.
        public static void ConnectToDB()
        {

            // Create connection string
            string ConnectionString = "Server=tcp:medserver1.database.windows.net,1433;" +
                 "Initial Catalog=project11;Persist Security Info=False;User ID=projectMed;" +
                 "Password=Medical123;MultipleActiveResultSets=False;Encrypt=True;" +
                 "TrustServerCertificate=False;Connection Timeout=30;";

            // Create table queries
            string CatqueryBuild = @"CREATE TABLE categories
                                   (id INT NOT NULL PRIMARY KEY , category VARCHAR(8));";

            string CitqueryBuild = @"CREATE TABLE cities 
                                    (id INT NOT NULL PRIMARY KEY , city VARCHAR(13));";

            string MeasqueryBuild = @"CREATE TABLE measures 
                                    (id INT PRIMARY KEY , measure VARCHAR(200));";


            string healqueryBuild = @"CREATE TABLE healthdata 
                                     (year INT,
                                     city INT,
                                     measure INT,
                                     value DECIMAL(4,2),
                                     lowconf DECIMAL(4,2),
                                     hiconf DECIMAL(4,2),
                                     population INT ,
                                     latitude DECIMAL(4,2),
                                     longitude DECIMAL(4,2),
                                     category INT );";

            // Create a connection (connection string)
            using (SqlConnection thisConnection = new SqlConnection(ConnectionString))

            {
                // Create a command (drop table query, connection)
                SqlCommand command = new SqlCommand(CatqueryBuild, thisConnection);

                Console.WriteLine("******************* Connection Established *********************************");
                Console.WriteLine();
                try
                {
                    // Open the connection (connection.Open())
                    thisConnection.Open();
                    // Execute the command (command.ExecuteNonQuery())
                    command.ExecuteNonQuery();
                    Console.WriteLine("CATEGORIES TABLE CREATED!");


                }
                // Catch exceptions
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);

                }
                SqlCommand commandB = new SqlCommand(CitqueryBuild, thisConnection);
                try
                {

                    commandB.ExecuteNonQuery();
                    Console.WriteLine("CITIES TABLE CREATED!!");


                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);

                }
                SqlCommand commandC = new SqlCommand(MeasqueryBuild, thisConnection);

                try
                {

                    commandC.ExecuteNonQuery();
                    Console.WriteLine("MEASURES TABLE CREATED!!!");


                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);

                }
                SqlCommand commandd = new SqlCommand(healqueryBuild, thisConnection);

                try
                {

                    commandd.ExecuteNonQuery();
                    Console.WriteLine("HEALTHDATA TABLE CREATED!!!!");


                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);

                }

                // Close the connection    
                thisConnection.Close();


            }
            // Add entities to tables
            fillTables();
            
        }

        // Method: fillTables()
        // Description: Populates the tables from the txt file entities.
        public static void fillTables()
        {

            string line, cat, meas, city;
            int index, catId, measId, cityId;
            // Find the absolute path
            string categoriesPath = "C:/Users/Administrator/source/repos/MedDbBuild/MedDbBuild/Textfiles/categories.txt";

            //Create a stream reader file object
            System.IO.StreamReader file = new System.IO.StreamReader(categoriesPath);
            Console.WriteLine();

            //loop from the beginning to end of the file splitting white space etc and using the comma as a 
            //index marker. Call the method that will add a substring to each row.

            while ((line = file.ReadLine()) != null)
            {
                line.Split(',', '\n', '\0');
                index = line.IndexOf(',');
                catId = Int32.Parse(line.Substring(0, index));
                cat = line.Substring(index + 1);
                updateCatTable(catId, cat);

            }

            // Close the file
            file.Close();

            categoriesPath = "C:/Users/Administrator/source/repos/MedDbBuild/MedDbBuild/Textfiles/measures.txt";
            file = new System.IO.StreamReader(categoriesPath);

            while ((line = file.ReadLine()) != null)
            {
                line.Split(',', '\n', '\0');
                index = line.IndexOf(',');
                measId = Int32.Parse(line.Substring(0, index));
                meas = line.Substring(index + 1);
                updateMeasTable(measId, meas);

            }
            // Close the file
            file.Close();


            categoriesPath = "C:/Users/Administrator/source/repos/MedDbBuild/MedDbBuild/Textfiles/cities.txt";
            file = new System.IO.StreamReader(categoriesPath);

            while ((line = file.ReadLine()) != null)
            {
                line.Split(',', '\n', '\0');
                index = line.IndexOf(',');
                cityId = Int32.Parse(line.Substring(0, index));
                city = line.Substring(index + 1);
                updateCityTable(cityId, city);

            }
            // Close the file
            file.Close();


            // I had to use TextReader as a result of getting a string input error
            // Index was harder to keep track of as a result of the parameters being read.

            string Year, hcity, hmeasure, hvalue, lowconf,hiconf, population, latitude, longitude, category;

            categoriesPath = "C:/Users/Administrator/source/repos/MedDbBuild/MedDbBuild/Textfiles/healthdata.txt";
            //file = new System.IO.StreamReader(categoriesPath);
            using (System.IO.TextReader reader = System.IO.File.OpenText(categoriesPath))
            {
                while(reader.Peek() > -1)
                {
                    var values = reader.ReadLine().Split(',');
                    Year=values[0];
                    hcity = values[1];
                    hmeasure = values[2];
                    hvalue = values[3];
                    lowconf = values[4];
                    hiconf = values[5];
                    population = values[6];
                    latitude = values[7];
                    longitude = values[8];
                    category = values[9];

                    int Years = Int32.Parse(Year);
                    int hcitys = Int32.Parse(hcity);
                    int hmeasures = Int32.Parse(hmeasure);
                    decimal hvalues = decimal.Parse(hvalue);
                    decimal lowconfs = decimal.Parse(lowconf);
                    decimal hiconfs = decimal.Parse(hiconf);
                    Int32 populations = Int32.Parse(population);
                    decimal latitudes = decimal.Parse(latitude);
                    decimal longitudes = decimal.Parse(longitude);
                    int categorys = Int32.Parse(category);

                    updateHealthDataTable(Years, hcitys, hmeasures, hvalues, 
                        lowconfs, hiconfs, populations, latitudes, longitudes, 
                        categorys);
              

                }
                reader.Close();
                Console.WriteLine("Database entity population successful!");
                Console.WriteLine("Press enter to exit: ");
                Console.ReadKey();

            } 
           
           
        }


        // Method updateCatTable
        // Desription: Fills the catagories table with appropriate data
        public static void updateCatTable(int id, string category)
        {

            // Create connection string
            string ConnectionString = "Server=tcp:medserver1.database.windows.net,1433;" +
                 "Initial Catalog=project11;Persist Security Info=False;User ID=projectMed;" +
                 "Password=Medical123;MultipleActiveResultSets=False;Encrypt=True;" +
                 "TrustServerCertificate=False;Connection Timeout=30;";

            // Create table queries
            string CatqueryBuild = @"INSERT INTO categories (id,category)VALUES (@id,@category)";

            // Create a connection (connection string)
            using (SqlConnection thisConnection = new SqlConnection(ConnectionString))

            {
                // Create a command (insert into table query, connection)
                SqlCommand command = new SqlCommand(CatqueryBuild, thisConnection);

                // Specify the passed parameters to add
                command.Parameters.AddWithValue("@id", id);
                command.Parameters.AddWithValue("@category", category);


                try
                {
                    // Open the connection (connection.Open())
                    thisConnection.Open();
                    // Execute the command (command.ExecuteNonQuery())
                    command.ExecuteNonQuery();



                }
                // Catch exceptions
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);

                }
                thisConnection.Close();

            }
        }

        // Method updateMeasTable
        // Desription: Fills the measures table with appropriate data.
        public static void updateMeasTable(int id, string Measure)
        {
            // Create connection string
            string ConnectionString = "Server=tcp:medserver1.database.windows.net,1433;" +
                 "Initial Catalog=project11;Persist Security Info=False;User ID=projectMed;" +
                 "Password=Medical123;MultipleActiveResultSets=False;Encrypt=True;" +
                 "TrustServerCertificate=False;Connection Timeout=30;";

            // Create table queries
            string CatqueryBuild = @"INSERT INTO measures (id,measure)VALUES (@id,@measure)";

            // Create a connection (connection string)
            using (SqlConnection thisConnection = new SqlConnection(ConnectionString))

            {
                // Create a command (insert into table query, connection)
                SqlCommand command = new SqlCommand(CatqueryBuild, thisConnection);

                // Specify the passed parameters to add
                command.Parameters.AddWithValue("@id", id);
                command.Parameters.AddWithValue("@measure", Measure);


                try
                {
                    // Open the connection (connection.Open())
                    thisConnection.Open();
                    // Execute the command (command.ExecuteNonQuery())
                    command.ExecuteNonQuery();



                }
                // Catch exceptions
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);

                }

                thisConnection.Close();
            }


        }

        // Method  updateCityTable
        // Description: Fills the city table with appropriate data
        public static void updateCityTable(int id, string city)
        {
            // Create connection string
            string ConnectionString = "Server=tcp:medserver1.database.windows.net,1433;" +
                 "Initial Catalog=project11;Persist Security Info=False;User ID=projectMed;" +
                 "Password=Medical123;MultipleActiveResultSets=False;Encrypt=True;" +
                 "TrustServerCertificate=False;Connection Timeout=30;";

            // Create table queries
            string CatqueryBuild = @"INSERT INTO cities (id,city)VALUES (@id,@city)";

            // Create a connection (connection string)
            using (SqlConnection thisConnection = new SqlConnection(ConnectionString))

            {
                // Create a command (insert into table query, connection)
                SqlCommand command = new SqlCommand(CatqueryBuild, thisConnection);

                // Specify the passed parameters to add
                command.Parameters.AddWithValue("@id", id);
                command.Parameters.AddWithValue("@city", city);

                //Console.WriteLine("******************* Connection Established *********************************");
                //Console.WriteLine();
                try
                {
                    // Open the connection (connection.Open())
                    thisConnection.Open();
                    // Execute the command (command.ExecuteNonQuery())
                    command.ExecuteNonQuery();



                }
                // Catch exceptions
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);

                }

                thisConnection.Close();

            }


        }
        
        // Method: updateHealthDataTable()
        // Description: Fills the healthdata table with appropriate data
        public static void updateHealthDataTable(int Year, int City, int Measure, decimal DValue,
              decimal lCOn, decimal hCon, int Pop, decimal Lat, decimal Long, int cat)
        {
            // Create connection string
            string ConnectionString = "Server=tcp:medserver1.database.windows.net,1433;" +
                 "Initial Catalog=project11;Persist Security Info=False;User ID=projectMed;" +
                 "Password=Medical123;MultipleActiveResultSets=False;Encrypt=True;" +
                 "TrustServerCertificate=False;Connection Timeout=30;";

            // Create table queries
            string CatqueryBuild = @"INSERT INTO healthdata (year,city,measure,
                    value,lowconf,hiconf, population, latitude,longitude,category)
                    VALUES (@year,@city,@measure,
                    @value,@lowconf,@hiconf,@population,@latitude,@longitude,@category)";

            // Create a connection (connection string)
            using (SqlConnection thisConnection = new SqlConnection(ConnectionString))

            {
                // Create a command (insert into table query, connection)
                SqlCommand command = new SqlCommand(CatqueryBuild, thisConnection);

                // Specify the passed parameters to add
                command.Parameters.AddWithValue("@year",Year);
                command.Parameters.AddWithValue("@city",City);
                command.Parameters.AddWithValue("@measure",Measure);
                command.Parameters.AddWithValue("@value", DValue);
                command.Parameters.AddWithValue("@lowconf",lCOn);
                command.Parameters.AddWithValue("@hiconf",hCon);
                command.Parameters.AddWithValue("@population",Pop);
                command.Parameters.AddWithValue("@latitude",Lat);
                command.Parameters.AddWithValue("@longitude",Long);
                command.Parameters.AddWithValue("@category",cat);

                //Console.WriteLine("******************* Connection Established *********************************");
                //Console.WriteLine();
                try
                {
                    // Open the connection (connection.Open())
                    thisConnection.Open();
                    // Execute the command (command.ExecuteNonQuery())
                    command.ExecuteNonQuery();



                }
                // Catch exceptions
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);

                }

                thisConnection.Close();
                

            }
            
        }
    }
}